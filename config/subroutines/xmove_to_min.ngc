O<xmove_to_min> sub
; #1 = #<_hal[grinder.x_min]>    (Get x_max from HAL)
; #3 = #<_hal[grinder.x_speed]>  (Set X-axis speed)
; #4 = #<_hal[grinder.enable_x]>
; #5 = #<_hal[grinder.enable_z]>
; #6 = #<_hal[grinder.enable_y]>
; #7 = #<_hal[grinder.crossfeed_at]>

;(print, X_min called)

o100 IF [#<_hal[grinder.enable_x]> EQ 1]
G1 X[#<_hal[grinder.x_min]>] F[#<_hal[grinder.x_speed]>]            (Move to x_min)
o100 ENDIF

o110 IF [#<_hal[grinder.enable_z]> EQ 0]
    o111 IF [#<_hal[grinder.enable_y]> EQ 1]
        o211 IF [[#<_hal[grinder.crossfeed_at]> EQ 0] OR [#<_hal[grinder.crossfeed_at]> EQ 1]]
            ;(print, downfeeding with Z off)
            o<YDownfeed> call (If Z is off, it won't trigger a downfeed. If Z is off but Y is still on, like in a plunge, downfeed.)
        o211 ENDIF
    o111 ELSE
        G04 P0.5
    o111 ENDIF
o110 ELSE
        o220 IF [[#<_hal[grinder.crossfeed_at]> EQ 0] OR [#<_hal[grinder.crossfeed_at]> EQ 1]]
        o221 IF [#<_hal[grinder.repeat_at]> EQ 0]
            o<ZMove_RepeatType0> call
        o221 ELSE IF [#<_hal[grinder.repeat_at]> EQ 1]
            o<ZMove_RepeatType1> call
        o221 ELSE IF [#<_hal[grinder.repeat_at]> EQ 2]
            o<ZMove_RepeatType2> call
        o221 ENDIF
    o220 ENDIF
o110 ENDIF

#<_x_cycles> = [#<_x_cycles> + 1]
o<xmove_to_min> endsub
