O<zmove_repeattype0> sub
;(, starting repeattype0 with Z direction of #8)

( M65 P0 is setting z_direction to false, towards min )
( M64 P0 is setting z_direction to true, towards max )

o100 IF [#<_hal[grinder.enable_z]> EQ 1]
   (p, crossfeed enabled, infeeding...)
   o110 IF [[#<_z> LE #<_hal[grinder.z_min]>]];flip directions if required
      ;(, flipped direction to 1 due to being at min limit)
         M100 P1
      o<ydownfeed> call
   o110 ELSE IF [[#<_z> GE #<_hal[grinder.z_max]>]]
      ;(, flipped direction to 0 due to being at max limit)
         M100 P0
      o<ydownfeed> call
   o110 ENDIF

   #8 = [#<_hal[grinder.z_direction]>]

   o120 IF [#<_hal[grinder.z_direction]> EQ 1]
      #9 = [#<_z> + #<_hal[grinder.z_crossfeed]>]
      o121 IF [#9 GT #<_hal[grinder.z_max]>]
         G1 Z[#<_hal[grinder.z_max]>] F[#<_hal[grinder.z_speed]>]
      o121 ELSE
         G1 Z[#9] F[#<_hal[grinder.z_speed]>]
      o121 ENDIF

      o122 IF [#<_z> GE #<_hal[grinder.z_max]>]
         o<Disable_At_Z_Limit> call
      o122 ENDIF
   o120 ELSE
      #10 = [#<_z> - #<_hal[grinder.z_crossfeed]>]
      o123 IF [#10 LT #<_hal[grinder.z_min]>]
         G1 Z[#<_hal[grinder.z_min]>] F[#<_hal[grinder.z_speed]>]
      o123 ELSE
         G1 Z[#10] F[#<_hal[grinder.z_speed]>]
      o123 ENDIF

      o124 IF [#<_z> LE #<_hal[grinder.z_min]>]
         o<Disable_At_Z_Limit> call
      o124 ENDIF
   o120 ENDIF

o100 ELSE
(print, this hsould never get called, because this script shouldn't be called by the x moves if Z is off)
   ; o130 IF [#<_hal[grinder.enable_x]> EQ 0]
   ;    G04 P0.5 (Just so the interpreter isn't spinning, because both X and Z are off)
   ; o130 ENDIF
o100 ENDIF

O<zmove_repeattype0> endsub
